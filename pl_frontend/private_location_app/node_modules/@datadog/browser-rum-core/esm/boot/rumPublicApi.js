import { BoundedBuffer, buildCookieOptions, checkCookiesAuthorized, checkIsNotLocalFile, createContextManager, deepClone, ErrorSource, isPercentage, makePublicApi, monitor, } from '@datadog/browser-core';
import { ActionType } from '../rawRumEvent.types';
export function makeRumPublicApi(startRumImpl) {
    var isAlreadyInitialized = false;
    var globalContextManager = createContextManager();
    var user = {};
    var getInternalContextStrategy = function () { return undefined; };
    var beforeInitAddTiming = new BoundedBuffer();
    var addTimingStrategy = function (name) {
        beforeInitAddTiming.add([name, performance.now()]);
    };
    var beforeInitAddAction = new BoundedBuffer();
    var addActionStrategy = function (action) {
        beforeInitAddAction.add([action, clonedCommonContext()]);
    };
    var beforeInitAddError = new BoundedBuffer();
    var addErrorStrategy = function (providedError) {
        beforeInitAddError.add([providedError, clonedCommonContext()]);
    };
    function clonedCommonContext() {
        return deepClone({
            context: globalContextManager.get(),
            user: user,
        });
    }
    var rumGlobal = makePublicApi({
        init: monitor(function (userConfiguration) {
            var _a;
            if (!checkCookiesAuthorized(buildCookieOptions(userConfiguration)) ||
                !checkIsNotLocalFile() ||
                !canInitRum(userConfiguration)) {
                return;
            }
            if (userConfiguration.publicApiKey) {
                userConfiguration.clientToken = userConfiguration.publicApiKey;
            }
            ;
            (_a = startRumImpl(userConfiguration, function () { return ({
                user: user,
                context: globalContextManager.get(),
            }); }), addActionStrategy = _a.addAction, addErrorStrategy = _a.addError, addTimingStrategy = _a.addTiming, getInternalContextStrategy = _a.getInternalContext);
            beforeInitAddAction.drain(function (_a) {
                var action = _a[0], commonContext = _a[1];
                return addActionStrategy(action, commonContext);
            });
            beforeInitAddError.drain(function (_a) {
                var error = _a[0], commonContext = _a[1];
                return addErrorStrategy(error, commonContext);
            });
            beforeInitAddTiming.drain(function (_a) {
                var name = _a[0], time = _a[1];
                return addTimingStrategy(name, time);
            });
            isAlreadyInitialized = true;
        }),
        addRumGlobalContext: monitor(globalContextManager.add),
        removeRumGlobalContext: monitor(globalContextManager.remove),
        getRumGlobalContext: monitor(globalContextManager.get),
        setRumGlobalContext: monitor(globalContextManager.set),
        getInternalContext: monitor(function (startTime) { return getInternalContextStrategy(startTime); }),
        addAction: monitor(function (name, context) {
            addActionStrategy({
                name: name,
                context: deepClone(context),
                startTime: performance.now(),
                type: ActionType.CUSTOM,
            });
        }),
        /**
         * @deprecated use addAction instead
         */
        addUserAction: function (name, context) {
            rumGlobal.addAction(name, context);
        },
        addError: monitor(function (error, context, source) {
            if (source === void 0) { source = ErrorSource.CUSTOM; }
            var checkedSource;
            if (source === ErrorSource.CUSTOM || source === ErrorSource.NETWORK || source === ErrorSource.SOURCE) {
                checkedSource = source;
            }
            else {
                console.error("DD_RUM.addError: Invalid source '" + source + "'");
                checkedSource = ErrorSource.CUSTOM;
            }
            addErrorStrategy({
                error: error,
                context: deepClone(context),
                source: checkedSource,
                startTime: performance.now(),
            });
        }),
        addTiming: monitor(function (name) {
            addTimingStrategy(name);
        }),
        setUser: monitor(function (newUser) {
            var sanitizedUser = sanitizeUser(newUser);
            if (sanitizedUser) {
                user = sanitizedUser;
            }
            else {
                console.error('Unsupported user:', newUser);
            }
        }),
    });
    return rumGlobal;
    function sanitizeUser(newUser) {
        if (typeof newUser !== 'object' || !newUser) {
            return;
        }
        var result = deepClone(newUser);
        if ('id' in result) {
            result.id = String(result.id);
        }
        if ('name' in result) {
            result.name = String(result.name);
        }
        if ('email' in result) {
            result.email = String(result.email);
        }
        return result;
    }
    function canInitRum(userConfiguration) {
        if (isAlreadyInitialized) {
            if (!userConfiguration.silentMultipleInit) {
                console.error('DD_RUM is already initialized.');
            }
            return false;
        }
        if (!userConfiguration || (!userConfiguration.clientToken && !userConfiguration.publicApiKey)) {
            console.error('Client Token is not configured, we will not send any data.');
            return false;
        }
        if (!userConfiguration.applicationId) {
            console.error('Application ID is not configured, no RUM data will be collected.');
            return false;
        }
        if (userConfiguration.sampleRate !== undefined && !isPercentage(userConfiguration.sampleRate)) {
            console.error('Sample Rate should be a number between 0 and 100');
            return false;
        }
        if (userConfiguration.resourceSampleRate !== undefined && !isPercentage(userConfiguration.resourceSampleRate)) {
            console.error('Resource Sample Rate should be a number between 0 and 100');
            return false;
        }
        if (Array.isArray(userConfiguration.allowedTracingOrigins) &&
            userConfiguration.allowedTracingOrigins.length !== 0 &&
            userConfiguration.service === undefined) {
            console.error('Service need to be configured when tracing is enabled');
            return false;
        }
        return true;
    }
}
//# sourceMappingURL=rumPublicApi.js.map