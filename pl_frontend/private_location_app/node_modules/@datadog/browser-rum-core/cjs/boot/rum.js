"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startRumEventCollection = exports.startRum = void 0;
var browser_core_1 = require("@datadog/browser-core");
var domMutationCollection_1 = require("../browser/domMutationCollection");
var performanceCollection_1 = require("../browser/performanceCollection");
var assembly_1 = require("../domain/assembly");
var internalContext_1 = require("../domain/internalContext");
var lifeCycle_1 = require("../domain/lifeCycle");
var parentContexts_1 = require("../domain/parentContexts");
var requestCollection_1 = require("../domain/requestCollection");
var actionCollection_1 = require("../domain/rumEventsCollection/action/actionCollection");
var errorCollection_1 = require("../domain/rumEventsCollection/error/errorCollection");
var longTaskCollection_1 = require("../domain/rumEventsCollection/longTask/longTaskCollection");
var resourceCollection_1 = require("../domain/rumEventsCollection/resource/resourceCollection");
var viewCollection_1 = require("../domain/rumEventsCollection/view/viewCollection");
var rumSession_1 = require("../domain/rumSession");
var batch_1 = require("../transport/batch");
var buildEnv_1 = require("./buildEnv");
function startRum(userConfiguration, getCommonContext) {
    var lifeCycle = new lifeCycle_1.LifeCycle();
    var _a = browser_core_1.commonInit(userConfiguration, buildEnv_1.buildEnv), configuration = _a.configuration, internalMonitoring = _a.internalMonitoring;
    var session = rumSession_1.startRumSession(configuration, lifeCycle);
    if (!configuration.isEnabled('onNewLocation')) {
        userConfiguration.onNewLocation = undefined;
    }
    internalMonitoring.setExternalContextProvider(function () {
        return browser_core_1.combine({
            application_id: userConfiguration.applicationId,
        }, parentContexts.findView(), getCommonContext().context);
    });
    var _b = startRumEventCollection(userConfiguration.applicationId, location, lifeCycle, configuration, session, getCommonContext, userConfiguration.onNewLocation), parentContexts = _b.parentContexts, addError = _b.addError, addAction = _b.addAction, addTiming = _b.addTiming;
    requestCollection_1.startRequestCollection(lifeCycle, configuration);
    performanceCollection_1.startPerformanceCollection(lifeCycle, configuration);
    domMutationCollection_1.startDOMMutationCollection(lifeCycle);
    var internalContext = internalContext_1.startInternalContext(userConfiguration.applicationId, session, parentContexts);
    return {
        addAction: addAction,
        addError: addError,
        addTiming: addTiming,
        configuration: configuration,
        lifeCycle: lifeCycle,
        parentContexts: parentContexts,
        session: session,
        getInternalContext: internalContext.get,
    };
}
exports.startRum = startRum;
function startRumEventCollection(applicationId, location, lifeCycle, configuration, session, getCommonContext, onNewLocation) {
    var parentContexts = parentContexts_1.startParentContexts(lifeCycle, session);
    var batch = batch_1.startRumBatch(configuration, lifeCycle);
    assembly_1.startRumAssembly(applicationId, configuration, lifeCycle, session, parentContexts, getCommonContext);
    longTaskCollection_1.startLongTaskCollection(lifeCycle);
    resourceCollection_1.startResourceCollection(lifeCycle, session);
    var addTiming = viewCollection_1.startViewCollection(lifeCycle, location, onNewLocation).addTiming;
    var addError = errorCollection_1.startErrorCollection(lifeCycle, configuration).addError;
    var addAction = actionCollection_1.startActionCollection(lifeCycle, configuration).addAction;
    return {
        addAction: addAction,
        addError: addError,
        parentContexts: parentContexts,
        addTiming: addTiming,
        stop: function () {
            // prevent batch from previous tests to keep running and send unwanted requests
            // could be replaced by stopping all the component when they will all have a stop method
            batch.stop();
        },
    };
}
exports.startRumEventCollection = startRumEventCollection;
//# sourceMappingURL=rum.js.map