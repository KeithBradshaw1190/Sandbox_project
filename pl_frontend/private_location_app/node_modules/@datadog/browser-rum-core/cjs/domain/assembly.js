"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startRumAssembly = void 0;
var browser_core_1 = require("@datadog/browser-core");
var rawRumEvent_types_1 = require("../rawRumEvent.types");
var lifeCycle_1 = require("./lifeCycle");
var SessionType;
(function (SessionType) {
    SessionType["SYNTHETICS"] = "synthetics";
    SessionType["USER"] = "user";
})(SessionType || (SessionType = {}));
var FIELDS_WITH_SENSITIVE_DATA = [
    'view.url',
    'view.referrer',
    'action.target.name',
    'error.message',
    'error.stack',
    'error.resource.url',
    'resource.url',
];
function startRumAssembly(applicationId, configuration, lifeCycle, session, parentContexts, getCommonContext) {
    lifeCycle.subscribe(lifeCycle_1.LifeCycleEventType.RAW_RUM_EVENT_COLLECTED, function (_a) {
        var startTime = _a.startTime, rawRumEvent = _a.rawRumEvent, savedCommonContext = _a.savedCommonContext, customerContext = _a.customerContext;
        var viewContext = parentContexts.findView(startTime);
        if (session.isTracked() && viewContext && viewContext.session.id) {
            var actionContext = parentContexts.findAction(startTime);
            var commonContext = savedCommonContext || getCommonContext();
            var rumContext = {
                _dd: {
                    format_version: 2,
                },
                application: {
                    id: applicationId,
                },
                date: new Date().getTime(),
                service: configuration.service,
                session: {
                    has_replay: commonContext.hasReplay,
                    // must be computed on each event because synthetics instrumentation can be done after sdk execution
                    // cf https://github.com/puppeteer/puppeteer/issues/3667
                    type: getSessionType(),
                },
            };
            var serverRumEvent = (needToAssembleWithAction(rawRumEvent)
                ? browser_core_1.combine(rumContext, viewContext, actionContext, rawRumEvent)
                : browser_core_1.combine(rumContext, viewContext, rawRumEvent));
            var context = browser_core_1.combine(commonContext.context, customerContext);
            if (!browser_core_1.isEmptyObject(context)) {
                serverRumEvent.context = context;
            }
            if (!browser_core_1.isEmptyObject(commonContext.user)) {
                // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
                ;
                serverRumEvent.usr = commonContext.user;
            }
            if (shouldSend(serverRumEvent, configuration.beforeSend)) {
                lifeCycle.notify(lifeCycle_1.LifeCycleEventType.RUM_EVENT_COLLECTED, serverRumEvent);
            }
        }
    });
}
exports.startRumAssembly = startRumAssembly;
function shouldSend(event, beforeSend) {
    if (beforeSend) {
        var result = browser_core_1.limitModification(event, FIELDS_WITH_SENSITIVE_DATA, beforeSend);
        if (result === false && event.type !== rawRumEvent_types_1.RumEventType.VIEW) {
            return false;
        }
        if (result === false) {
            console.warn("Can't dismiss view events using beforeSend, use onNewLocation instead!");
        }
    }
    return true;
}
function needToAssembleWithAction(event) {
    return [rawRumEvent_types_1.RumEventType.ERROR, rawRumEvent_types_1.RumEventType.RESOURCE, rawRumEvent_types_1.RumEventType.LONG_TASK].indexOf(event.type) !== -1;
}
function getSessionType() {
    // eslint-disable-next-line no-underscore-dangle
    return window._DATADOG_SYNTHETICS_BROWSER === undefined ? SessionType.USER : SessionType.SYNTHETICS;
}
//# sourceMappingURL=assembly.js.map